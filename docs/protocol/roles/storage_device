-------------------------------------------------------------------

- Projection p, initially empty but not NULL.

- HashMap<ulong, <ulong, bool>> map
Keep the map from ela to <epa, isDeleted>.

- ulong end_of_cleaned, initially -1.
The watermark before which no unwritten addresses exist.

===================================================================
Functions
-------------------------------------------------------------------

Interfaces

- updateProj()
- onRead(offset, epoch)
===================================================================

// Call this function when starts up
Operation updateProj() {
    send (diff: p) to config.auxiliary_addr
        on receive <diff>
            if (diff != NULL)
                p.apply(diff)
}


Operation onRead(offset, epoch) {
    while (epoch != p.epoch) {
        if (epoch < p.epoch)
            return <err_sealed, diff(p)>

        updateProj()
    }

    if (map.contains(offset))
        if (map.get(offset).isDeleted)
            return <err_deleted, NULL>
    else
        if (offset <= end_of_cleaned)
            return <err_deleted, NULL>
        else
            return <err_unwritten, NULL>

    addr = map.get(offset).epa
    return <-1, read(addr)>
}


Operation onAppend(offset, data, epoch) {
    while (epoch != p.epoch) {
        if (epoch < p.epoch)
            return <err_sealed, diff(p)>

        updateProj()
    }

    if (map.containts(offset))
        if (map.get(offset).isDeleted)
            return <err_deleted, NULL>
        else
            return <err_written, NULL>
    else if (offset <= end_of_cleaned)
          return <err_deleted, NULL>

    // Hold place for this offset
    map.put(offset, NULL)

    extents = p.extentsOf(offset)
    if (extents[0] == host_network_addr)
        for (extents[1:])
            async send onAppend(offset, data, epoch)
            on timeout
                report

    addr = parse(offset)
}


Operation onTrim(offset, type, epoch) {

}


// (Offload)
Operation ping() {

}


Operation diff(p) {
    if (p == self.p)
        return NULL

    return diff(p, self.p)
}

===================================================================