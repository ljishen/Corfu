-------------------------------------------------------------------

- HashMap<ulong, Projection> map, initially empty.
Keep the map from epoch to proj.

- List<Replica> inventory
A list of available replica associated with free ranges.

===================================================================
Functions
-------------------------------------------------------------------

Interfaces

- onGet()
- onDiff(o_range)
- onPublish(new_seq_addr)
- onReport(oper, offset, replica_id)
===================================================================

Operation onGet() {
    return map.lastValue()
}

Operation onGet(offset) {
    return map.lastValue().isOf(offset)
}


// @param o_range: the range held by the client
Operation onDiff(o_range) {
    Projection p = map.lastValue()

    // The new ranges for the o_range could become
    // a set of ranges that cover the same period
    List<Range> rs

    range = p.rangeOf(o_range.from)
    rs.add(range)

    while (range.to < o_range.to) {
        range = p.rangeOf(range.to)
        rs.add(range)
    }

    return diff(rs, o_range)
}


Operation onPublish(new_seq_addr) {
    synchronized(map) {
        Projection p = copy(map.lastValue())
        p.sequencer = new_seq_addr
        map.put(map.lastKey() + 1, p)
        return p.moffset
    }
}


// @param oper:       the 'READ' or 'WRITE' operation
// @param offset:     the faulty offset
// @param replica_id: the id of the faulty replica
// @return            this function does not return anything to
//                    the reporter
Operation onReport(oper, offset, replica_id) {
    epoch = map.lastKey()

    Projection n_proj = copy(map.get(epoch))
    <range, idx> = n_proj.isOf(offset)

    replica_idx = range.extents[idx].replicas.indexOf(replica_id)

    // Return if the faulty replica has already been removed.
    if (replica_idx == -1)
        return

    range.extents[idx].replicas.remove(replica_idx)

    // Update the range epoch
    range.epoch = epoch + 1

    // Just remove the faulty replica if in 'READ' operation
    if (oper == 'READ')
        optimisticPublish(epoch, n_proj)
        return


    new_range = copy(range)

    // Find the maximal number no greater than the offset
    // and should be assigned to extents[0], e.g.
    //
    // Case 1:
    // Range [2..9), faulty offset is 6. The slice point should be 5.
    // 2 5 8           2       5 8
    // 3 6      -->    3   +   6
    // 4 7             4       7
    //
    // Case 2:
    // Range [11..19), faulty offset is 13. The slice point should be 11.
    // 11 14 17           11 14 17
    // 12 15 18    -->    12 15 18
    // 13 16              13 16
    num_extents = len(range.extents)
    slice = (offset - range.from) / num_extents * num_extents + range.from

    // The offset could be the first position in any extent (Case 2 above)
    if (range.from == slice)
        addReplica(n_proj, offset)
        optimisticPublish(epoch, n_proj)
        return


    // Slice the projection
    range.to = slice

    // Update the "to" addr
    for (int i = 0; i < len(range.extents); i++)
        for (int j = 0; j < len(range.extents[i].replicas); j++)
            range.extents[i].replicas[j].to = (range.to - range.from) / len(range.extents) +
                        range.extents[i].replicas[j].from

    // Insert the new_range
    new_range.from = slice
    new_range.next = range.next
    range.next = new_range

    // Provision a free replica to the new_range
    addReplica(n_proj, offset)

    // Update the "from" addr
    for (int i = 0; i < len(new_range.extents); i++)
        for (int j = 0; j < len(new_range.extents[i].replicas); j++)
            new_range.extents[i].replicas[j].from += (range.to - range.from / len(new_range.extents))

    optimisticPublish(epoch, n_proj)
}


// @param epoch:  the last known epoch
// @param n_proj: the new projection
Operation optimisticPublish(epoch, n_proj) {
    synchronized(map) {
        if (epoch == map.lastKey())
            // Publish the new projection
            map.put(epoch + 1, n_proj)
    }
}


// Add a replica to the extent corresponding to the
// offset in the projection.
Operation addReplica(p, offset) {
    <range, idx> = p.isOf(offset)
    extent = range.extents[idx]
    free_r = takeInventory(extent.replicas[0].to - extent.replicas[0].from)
    free_r.enabled = TRUE
    extent.replicas.add(free_r)
}


// Ensure at least one replica is satisfied in the inventory
Operation takeInventory(len) {
    for (Replica r : inventory)
        free_len = r.to - r.from
        if (free_len >= len)
            if (free_len == len)
                inventory.remove(r)
                return r
            else
                free_r = copy(r)
                free_r.to = free_r.from + len
                r.from = r.from + len
                return free_r
}

===================================================================