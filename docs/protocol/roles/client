-------------------------------------------------------------------

- Config config
The configuration that stores the sequencer_addr and auxiliary_addr

- Projection p

- ulong c_offset, initially -1.
The maximal known position that has been written.
Used as the starting point when the sequencer is not available.

===================================================================
Functions
-------------------------------------------------------------------

Interfaces

- init()
- read(offset)
- append(data)
- trim(offset, type)
===================================================================

// Call this function when starting the client
Operation init() {
    send (get: ) to config.auxiliary_addr
        on receive <proj>
            p = proj
}


Operation read(offset) {
    while (TRUE) {
        <range, idx> = p.isOf(offset)
        if (range == NULL)
            send (get: offset) to config.auxiliary_addr
                on timeout
                    throw error
                on receive <n_range>
                    p.add(n_range)
                    continue

        range.auxiliary = config.auxiliary_addr

        // Read from the primary
        r = range.extents[idx].replicas[0]
        send (read: offset, range) to r.addr
            on timeout
                update(range)
            on receive <errno, data>
                if (errno == err_sealed)
                    if (data == NULL)
                        update(range)
                    else
                        p.apply(data)
                else if (errno == err_deleted or err_unwritten)
                    return errno
                else if (errno == -1)
                    return data
    }
}


Operation append(data) {
    offset = -1

    while (TRUE) {
        if (offset == -1)
            do {
                send (getToken: ) to p.sequencer
                    on receive <tkn>
                        offset = tkn
                        break
                    on timeout
                        continue
            } while (updateSeq())

            if (offset != -1)
                c_offset = offset
            else
                c_offset = max(p.moffset, c_offset + 1)


        <range, idx> = p.isOf(offset)
        range.auxiliary = config.auxiliary_addr

        // Write to the primary
        r = range.extents[idx].replicas[0]
        send (append: range, p.epoch, c_offset, data, 0) to r.addr
            on timeout
                update(range)
            on receive <errno>
                if (errno == err_sealed)
                    update(range)
                else if (errno == err_deleted or err_written)
                    // get the next available tkn
                    offset = -1
                else if (errno == -1)
                    return c_offset
    }
}


// @param type:
//   - prefix: trim from the offset all through to the head of log.
//   - offset: trim just the specific offset alone.
Operation trim(offset, type) {
    while (TRUE) {
        <range, idx> = p.isOf(offset)
        range.auxiliary = config.auxiliary_addr

        r = range.extents[idx].replicas[0]
        send (trim: range, p.epoch, offset, type, 0) to r.addr
            on timeout
                update(range)
            on receive <errno>
                if (errno == err_sealed)
                    update(range)
                else
                    // errno could be err_deleted, err_unwritten or -1
                    return errno
    }
}


// Update the range when the client failed to contact primary
// or the primary responses with err_sealed.
Operation update(range) {
    send (diff: range) to config.auxiliary_addr
        on receive <diff>
            if (diff != NULL)
                p.apply(diff)
        on timeout
            throw error
}


Operation updateSeq() {
    send (get: ) to config.auxiliary_addr
        on receive <proj>
            if (p.sequencer != proj.sequencer)
                p.sequencer = proj.sequencer
                return TRUE
            else
                return FALSE
}

===================================================================